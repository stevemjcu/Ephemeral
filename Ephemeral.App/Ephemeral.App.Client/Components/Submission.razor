@inject IJSRuntime JSRuntime

<MudCard>
	<MudCardContent>
		<MudText>@Description</MudText>
		<br />
		<MudTextField T="string" Variant="Variant.Outlined" Lines="4" @bind-Value="Value" Disabled="@IsReadOnly" />
	</MudCardContent>
	<MudCardActions>
		<MudTooltip Text="@Name" Delay="1000"><MudIconButton Color="@Color.Primary" Icon="@Icon" OnClick="OnSubmit" Disabled="@IsDisabled" aria-label="@Name" /></MudTooltip>
		<MudTooltip Text="Copy" Delay="1000"><MudIconButton Color="@Color.Primary" Icon="@Icons.Material.Filled.ContentCopy" OnClick="OnCopy" aria-label="Copy" /></MudTooltip>
	</MudCardActions>
</MudCard>

@code {
	[Parameter] public required string Name { get; set; }
	[Parameter] public required string Description { get; set; }
	[Parameter] public required string Icon { get; set; }
	[Parameter] public required Func<string, Task<string>> Action { get; set; }
	[Parameter] public string Value { get; set; } = string.Empty;
	[Parameter] public bool IsReadOnly { get; set; } = false;

	public bool IsDisabled { get; set; } = false;

	private async Task OnSubmit()
	{
		Value = await Action.Invoke(Value);
		(IsReadOnly, IsDisabled) = (true, true);
	}

	private async Task OnCopy() =>
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Value);
}
